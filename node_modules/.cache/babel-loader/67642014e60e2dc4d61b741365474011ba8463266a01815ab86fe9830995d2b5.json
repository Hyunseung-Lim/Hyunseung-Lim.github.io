{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HyunseungLim\\\\Desktop\\\\git\\\\Hyunseung-Lim.github.io\\\\src\\\\Components\\\\SegmentedButton\\\\segmentedbutton.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./segmentedbutton.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SegmentedControl = ({\n  name,\n  callback,\n  controlRef,\n  segments\n}) => {\n  _s();\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [sliderStyle, setSliderStyle] = useState({});\n  const buttonRefs = useRef([]);\n  const handleSegmentClick = (index, value) => {\n    setActiveIndex(index);\n    updateSliderPosition(index);\n    if (callback) {\n      callback(value);\n    }\n  };\n  const updateSliderPosition = index => {\n    const button = buttonRefs.current[index];\n    if (button) {\n      const {\n        offsetLeft,\n        offsetWidth\n      } = button;\n      const parentPadding = 4; // segmented-control padding\n      setSliderStyle({\n        transform: `translateX(${offsetLeft - parentPadding}px)`,\n        width: `${offsetWidth}px`,\n        left: `${parentPadding}px`\n      });\n    }\n  };\n  useEffect(() => {\n    // 초기 슬라이더 위치 설정\n    setTimeout(() => updateSliderPosition(0), 100);\n    if (callback && segments[0]) {\n      callback(segments[0].value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    // 윈도우 리사이즈 시 슬라이더 위치 재조정\n    const handleResize = () => {\n      updateSliderPosition(activeIndex);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [activeIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"segmented-control\",\n    ref: controlRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      style: sliderStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), segments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      ref: el => {\n        buttonRefs.current[index] = el;\n        if (segment.ref) segment.ref.current = el;\n      },\n      className: `segmented-button ${activeIndex === index ? 'active' : ''}`,\n      onClick: () => handleSegmentClick(index, segment.value),\n      children: segment.label\n    }, segment.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(SegmentedControl, \"8nwbAAoRpYymr9VU/6luwP159aQ=\");\n_c = SegmentedControl;\nvar _c;\n$RefreshReg$(_c, \"SegmentedControl\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SegmentedControl","name","callback","controlRef","segments","_s","activeIndex","setActiveIndex","sliderStyle","setSliderStyle","buttonRefs","handleSegmentClick","index","value","updateSliderPosition","button","current","offsetLeft","offsetWidth","parentPadding","transform","width","left","setTimeout","handleResize","window","addEventListener","removeEventListener","className","ref","children","style","fileName","_jsxFileName","lineNumber","columnNumber","map","segment","el","onClick","label","_c","$RefreshReg$"],"sources":["C:/Users/HyunseungLim/Desktop/git/Hyunseung-Lim.github.io/src/Components/SegmentedButton/segmentedbutton.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./segmentedbutton.css\";\n\nexport const SegmentedControl = ({ name, callback, controlRef, segments }) => {\n    const [activeIndex, setActiveIndex] = useState(0);\n    const [sliderStyle, setSliderStyle] = useState({});\n    const buttonRefs = useRef([]);\n\n    const handleSegmentClick = (index, value) => {\n        setActiveIndex(index);\n        updateSliderPosition(index);\n        if (callback) {\n            callback(value);\n        }\n    };\n\n    const updateSliderPosition = (index) => {\n        const button = buttonRefs.current[index];\n        if (button) {\n            const { offsetLeft, offsetWidth } = button;\n            const parentPadding = 4; // segmented-control padding\n            setSliderStyle({\n                transform: `translateX(${offsetLeft - parentPadding}px)`,\n                width: `${offsetWidth}px`,\n                left: `${parentPadding}px`\n            });\n        }\n    };\n\n    useEffect(() => {\n        // 초기 슬라이더 위치 설정\n        setTimeout(() => updateSliderPosition(0), 100);\n        \n        if (callback && segments[0]) {\n            callback(segments[0].value);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        // 윈도우 리사이즈 시 슬라이더 위치 재조정\n        const handleResize = () => {\n            updateSliderPosition(activeIndex);\n        };\n        \n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, [activeIndex]);\n\n    return (\n        <div className=\"segmented-control\" ref={controlRef}>\n            <div className=\"slider\" style={sliderStyle}></div>\n            {segments.map((segment, index) => (\n                <button\n                    key={segment.value}\n                    ref={(el) => {\n                        buttonRefs.current[index] = el;\n                        if (segment.ref) segment.ref.current = el;\n                    }}\n                    className={`segmented-button ${activeIndex === index ? 'active' : ''}`}\n                    onClick={() => handleSegmentClick(index, segment.value)}\n                >\n                    {segment.label}\n                </button>\n            ))}\n        </div>\n    );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAMe,UAAU,GAAGb,MAAM,CAAC,EAAE,CAAC;EAE7B,MAAMc,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACzCN,cAAc,CAACK,KAAK,CAAC;IACrBE,oBAAoB,CAACF,KAAK,CAAC;IAC3B,IAAIV,QAAQ,EAAE;MACVA,QAAQ,CAACW,KAAK,CAAC;IACnB;EACJ,CAAC;EAED,MAAMC,oBAAoB,GAAIF,KAAK,IAAK;IACpC,MAAMG,MAAM,GAAGL,UAAU,CAACM,OAAO,CAACJ,KAAK,CAAC;IACxC,IAAIG,MAAM,EAAE;MACR,MAAM;QAAEE,UAAU;QAAEC;MAAY,CAAC,GAAGH,MAAM;MAC1C,MAAMI,aAAa,GAAG,CAAC,CAAC,CAAC;MACzBV,cAAc,CAAC;QACXW,SAAS,EAAG,cAAaH,UAAU,GAAGE,aAAc,KAAI;QACxDE,KAAK,EAAG,GAAEH,WAAY,IAAG;QACzBI,IAAI,EAAG,GAAEH,aAAc;MAC3B,CAAC,CAAC;IACN;EACJ,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACZ;IACA2B,UAAU,CAAC,MAAMT,oBAAoB,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;IAE9C,IAAIZ,QAAQ,IAAIE,QAAQ,CAAC,CAAC,CAAC,EAAE;MACzBF,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACS,KAAK,CAAC;IAC/B;IACA;EACJ,CAAC,EAAE,EAAE,CAAC;EAENjB,SAAS,CAAC,MAAM;IACZ;IACA,MAAM4B,YAAY,GAAGA,CAAA,KAAM;MACvBV,oBAAoB,CAACR,WAAW,CAAC;IACrC,CAAC;IAEDmB,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IAC/C,OAAO,MAAMC,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;EACnE,CAAC,EAAE,CAAClB,WAAW,CAAC,CAAC;EAEjB,oBACIP,OAAA;IAAK6B,SAAS,EAAC,mBAAmB;IAACC,GAAG,EAAE1B,UAAW;IAAA2B,QAAA,gBAC/C/B,OAAA;MAAK6B,SAAS,EAAC,QAAQ;MAACG,KAAK,EAAEvB;IAAY;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACjD/B,QAAQ,CAACgC,GAAG,CAAC,CAACC,OAAO,EAAEzB,KAAK,kBACzBb,OAAA;MAEI8B,GAAG,EAAGS,EAAE,IAAK;QACT5B,UAAU,CAACM,OAAO,CAACJ,KAAK,CAAC,GAAG0B,EAAE;QAC9B,IAAID,OAAO,CAACR,GAAG,EAAEQ,OAAO,CAACR,GAAG,CAACb,OAAO,GAAGsB,EAAE;MAC7C,CAAE;MACFV,SAAS,EAAG,oBAAmBtB,WAAW,KAAKM,KAAK,GAAG,QAAQ,GAAG,EAAG,EAAE;MACvE2B,OAAO,EAAEA,CAAA,KAAM5B,kBAAkB,CAACC,KAAK,EAAEyB,OAAO,CAACxB,KAAK,CAAE;MAAAiB,QAAA,EAEvDO,OAAO,CAACG;IAAK,GARTH,OAAO,CAACxB,KAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASd,CACX,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC9B,EAAA,CAhEWL,gBAAgB;AAAAyC,EAAA,GAAhBzC,gBAAgB;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}